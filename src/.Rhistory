# trabajo solo con los datos con clase, es decir 202107
dataset <- dataset[clase_ternaria != ""]
# Reemplazar en dataset clase_ternaria donde dice "BAJA+1" por "CONTINUA"
dataset$clase_ternaria <- ifelse(dataset$clase_ternaria == "BAJA+1", "CONTINUA", dataset$clase_ternaria)
# genero el archivo para Kaggle
# creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create("./exp/HT2020/", showWarnings = FALSE)
archivo_salida <- "./exp/HT2020/gridsearch.txt"
# genero la data.table donde van los resultados del Grid Search
tb_grid_search <- data.table( max_depth = integer(),
min_split = integer(),
min_bucket = integer(),
min_cp = numeric(),
peso_baja2 = numeric(),
ganancia_promedio = numeric() )
print(table(dataset$clase_ternaria))
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_binaria_esqueleto_i5.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_binaria_esqueleto_i5.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_binaria_esqueleto_i5.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_binaria_PrimerModelo_i5.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_esqueleto_eli.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_esqueleto_eli.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_esqueleto_Salvador.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_esqueleto_Salvador.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_esqueleto_Salvador.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z141_gridsearch_Una_bayesiana.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/rpart/z101_PrimerModelo.R", echo=TRUE)
# limpio la memoria
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("ranger")
# limpio la memoria
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("ranger")
require("randomForest") # solo se usa para imputar nulos
# notar como la suma de muchos arboles contrarresta el efecto de min.node.size=1
# "mtry" = 30, cantidad de variables que evalua para hacer un split
#  generalmente sqrt(ncol(dtrain))
param <- list(
"num.trees" = 308, # cantidad de arboles
"mtry" = 10,
"min.node.size" = 433, # tamaño minimo de las hojas
"max.depth" = 14 # 0 significa profundidad infinita
)
setwd("c:/labi") # Establezco el Working Directory
# cargo MI semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
ksemilla_azar <- tabla_semillas[ 1, semilla ]  # 1 es mi primer semilla
# cargo los datos donde entreno
dataset <- fread("./datasets/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107]
dapply <- dataset[foto_mes == 202109]
# genero el modelo de Random Forest con la libreria ranger
set.seed(ksemilla_azar) # Establezco la semilla aleatoria
factorizado <- as.factor(dtrain$clase_ternaria)
dtrain[, clase_ternaria := factorizado]
# imputo los nulos, ya que ranger no acepta nulos
# Leo Breiman, ¿por que le temias a los nulos?
dtrain <- na.roughfix(dtrain)
setorder(dtrain, clase_ternaria) # primero quedan los BAJA+1, BAJA+2, CONTINUA
# genero el modelo de Random Forest llamando a ranger()
modelo <- ranger(
formula = "clase_ternaria ~ .",
data = dtrain,
probability = TRUE, # para que devuelva las probabilidades
num.trees = param$num.trees,
mtry = param$mtry,
min.node.size = param$min.node.size,
max.depth = param$max.depth
)
# Carpinteria necesaria sobre  dapply
# como quiere la Estadistica Clasica, imputar nulos por separado
# ( aunque en este caso ya tengo los datos del futuro de anteman
#  pero bueno, sigamos el librito de estos fundamentalistas a rajatabla ...
dapply[, clase_ternaria := NULL]
dapply <- na.roughfix(dapply)
# aplico el modelo recien creado a los datos del futuro
prediccion <- predict(modelo, dapply)
nrow(dapply)-cumsum( table( round(prediccion$predictions[, "BAJA+2"], 4) ))
nrow(dapply)-cumsum( table( round(prediccion$predictions[, "BAJA+2"], 2) ))
prediccion
# Genero la entrega para Kaggle
entrega <- as.data.table(list(
"numero_de_cliente" = dapply[, numero_de_cliente],
"Predicted" = as.numeric(prediccion$predictions[, "BAJA+2"] > 1 / 40)
)) # genero la salida
entrega
# Genero la entrega para Kaggle
entrega <- as.data.table(list(
"numero_de_cliente" = dapply[, numero_de_cliente],
"Predicted" = as.numeric(prediccion$predictions[, "BAJA+2"] > 1 / 40),
"probabilidad" = as.numeric(prediccion$predictions[, "BAJA+2"])
)) # genero la salida
entrega
# ordeno entrega por probabilidad descendente
setorder(entrega, -probabilidad)
entrega
# a los primeros 10000 les pongo 1 al resto 0 en Predicted
entrega[1:10000, Predicted := 1]
entrega[10001:nrow(entrega), Predicted := 0]
entrega
cortes <- seq(8000, 12000, by = 500)
for (envios in cortes) {
entrega[, Predicted := 0L]
entrega[1:envios, Predicted := 1L]
fwrite(entrega[, list(numero_de_cliente, Predicted)],
file = paste0('exp/KA4310/KA4310', "_", envios, ".csv"),
sep = ","
)
}
# creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create("./exp/KA4310/", showWarnings = FALSE)
archivo_salida <- "./exp/KA4310/KA4310_001.csv"
cortes <- seq(8000, 12000, by = 500)
for (envios in cortes) {
entrega[, Predicted := 0L]
entrega[1:envios, Predicted := 1L]
fwrite(entrega[, list(numero_de_cliente, Predicted)],
file = paste0('exp/KA4310/KA4310', "_", envios, ".csv"),
sep = ","
)
}
cortes <- seq(10000, 11000, by = 100)
for (envios in cortes) {
entrega[, Predicted := 0L]
entrega[1:envios, Predicted := 1L]
fwrite(entrega[, list(numero_de_cliente, Predicted)],
file = paste0('exp/KA4310/KA4310', "_", envios, ".csv"),
sep = ","
)
}
# limpio la memoria
rm(list = ls()) # remove all objects #
gc() # garbage collection
require("data.table")
require("rlist")
require("lightgbm")
# paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
# para que se detenga ante el primer error
# y muestre el stack de funciones invocadas
options(error = function() {
traceback(20)
options(error = NULL)
stop("exiting after script error")
})
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "HT4510_ULGBMP"
PARAM$input$dataset <- "./datasets/dataset_pequeno.csv"
PARAM$input$training <- c(202107) # los meses en los que vamos a entrenar
# un undersampling de 0.1  toma solo el 10% de los CONTINUA
# undersampling de 1.0  implica tomar TODOS los datos
PARAM$trainingstrategy$undersampling <- 1.0
# limpio la memoria
rm(list = ls()) # remove all objects #
gc() # garbage collection
require("data.table")
require("rlist")
require("lightgbm")
# paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
# para que se detenga ante el primer error
# y muestre el stack de funciones invocadas
options(error = function() {
traceback(20)
options(error = NULL)
stop("exiting after script error")
})
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "HT4510_ULGBMP"
PARAM$input$dataset <- "./datasets/dataset_pequeno.csv"
PARAM$input$training <- c(202107) # los meses en los que vamos a entrenar
# un undersampling de 0.1  toma solo el 10% de los CONTINUA
# undersampling de 1.0  implica tomar TODOS los datos
PARAM$trainingstrategy$undersampling <- 1.0
PARAM$hyperparametertuning$iteraciones <- 120
PARAM$hyperparametertuning$xval_folds <- 5
PARAM$hyperparametertuning$POS_ganancia <- 117000
PARAM$hyperparametertuning$NEG_ganancia <- -3000
# Aqui se cargan los bordes de los hiperparametros
hs <- makeParamSet(
makeNumericParam("learning_rate", lower = 0.01, upper = 0.3),
makeNumericParam("feature_fraction", lower = 0.2, upper = 1.0),
makeIntegerParam("min_data_in_leaf", lower = 1L, upper = 8000L),
makeIntegerParam("num_leaves", lower = 16L, upper = 1024L),
makeIntegerParam("envios", lower = 5000L, upper = 15000L)
)
loguear <- function(
reg, arch = NA, folder = "./exp/",
ext = ".txt", verbose = TRUE) {
archivo <- arch
if (is.na(arch)) archivo <- paste0(folder, substitute(reg), ext)
if (!file.exists(archivo)) # Escribo los titulos
{
linea <- paste0(
"fecha\t",
paste(list.names(reg), collapse = "\t"), "\n"
)
cat(linea, file = archivo)
}
linea <- paste0(
format(Sys.time(), "%Y%m%d %H%M%S"), "\t", # la fecha y hora
gsub(", ", "\t", toString(reg)), "\n"
)
cat(linea, file = archivo, append = TRUE) # grabo al archivo
if (verbose) cat(linea) # imprimo por pantalla
}
fganancia_logistic_lightgbm <- function(probs, datos) {
vpesos <- get_field(datos, "weight")
# vector de ganancias
vgan <- ifelse(vpesos == 1.0000002, PARAM$hyperparametertuning$POS_ganancia,
ifelse(vpesos == 1.0000001, PARAM$hyperparametertuning$NEG_ganancia,
PARAM$hyperparametertuning$NEG_ganancia /
PARAM$trainingstrategy$undersampling
)
)
tbl <- as.data.table(list("vprobs" = probs, "vgan" = vgan))
setorder(tbl, -vprobs)
ganancia <- tbl[1:GLOBAL_envios, sum(vgan)]
return(list(
"name" = "ganancia",
"value" = ganancia,
"higher_better" = TRUE
))
}
EstimarGanancia_lightgbm <- function(x) {
gc() # libero memoria
# llevo el registro de la iteracion por la que voy
GLOBAL_iteracion <<- GLOBAL_iteracion + 1
# para usar en fganancia_logistic_lightgbm
# asigno la variable global
GLOBAL_envios <<- as.integer(x$envios / PARAM$hyperparametertuning$xval_folds)
# cantidad de folds para cross validation
kfolds <- PARAM$hyperparametertuning$xval_folds
param_basicos <- list(
objective = "binary",
metric = "custom",
first_metric_only = TRUE,
boost_from_average = TRUE,
feature_pre_filter = FALSE,
verbosity = -100,
max_depth = -1, # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split = 0.0, # por ahora, lo dejo fijo
lambda_l1 = 0.0, # por ahora, lo dejo fijo
lambda_l2 = 0.0, # por ahora, lo dejo fijo
max_bin = 31, # por ahora, lo dejo fijo
num_iterations = 9999, # valor grande, lo limita early_stopping_rounds
force_row_wise = TRUE, # para evitar warning
seed = ksemilla_azar1,
is_unbalance = TRUE # Indica que las clases están desbalanceadas
)
# el parametro discolo, que depende de otro
param_variable <- list(
early_stopping_rounds =
as.integer(50 + 5 / x$learning_rate)
)
param_completo <- c(param_basicos, param_variable, x)
set.seed(ksemilla_azar1)
modelocv <- lgb.cv(
data = dtrain,
eval = fganancia_logistic_lightgbm,
stratified = TRUE, # sobre el cross validation
nfold = kfolds, # folds del cross validation
param = param_completo,
verbose = -100
)
# obtengo la ganancia
ganancia <- unlist(modelocv$record_evals$valid$ganancia$eval)[modelocv$best_iter]
ganancia_normalizada <- ganancia * kfolds # normailizo la ganancia
# asigno el mejor num_iterations
param_completo$num_iterations <- modelocv$best_iter
# elimino de la lista el componente
param_completo["early_stopping_rounds"] <- NULL
# el lenguaje R permite asignarle ATRIBUTOS a cualquier variable
# esta es la forma de devolver un parametro extra
attr(ganancia_normalizada, "extras") <-
list("num_iterations" = modelocv$best_iter)
# logueo
xx <- param_completo
xx$ganancia <- ganancia_normalizada # le agrego la ganancia
xx$iteracion <- GLOBAL_iteracion
loguear(xx, arch = klog)
# Voy registrando la importancia de variables
if (ganancia_normalizada > GLOBAL_gananciamax) {
GLOBAL_gananciamax <<- ganancia_normalizada
modelo <- lgb.train(
data = dtrain,
param = param_completo,
verbose = -100
)
tb_importancia <- as.data.table(lgb.importance(modelo))
archivo_importancia <- paste0("impo_", GLOBAL_iteracion, ".txt")
fwrite(tb_importancia,
file = archivo_importancia,
sep = "\t" )
loguear(xx, arch = klog_mejor)
}
return(ganancia_normalizada)
}
# Aqui se debe poner la carpeta de la computadora local
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("c:/labi") # Establezco el Working Directory
# cargo MI semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
# Aqui se debe poner la carpeta de la computadora local
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("c:/labi/") # Establezco el Working Directory
# cargo MI semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
# Aqui se debe poner la carpeta de la computadora local
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("c:/labi") # Establezco el Working Directory
# cargo MI semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
ksemilla_azar1 <- tabla_semillas[ 1, semilla ]  # 1 es mi primera semilla
ksemilla_azar2 <- tabla_semillas[ 2, semilla ]  # 2 es mi segunda semilla
# cargo el dataset donde voy a entrenar el modelo
dataset <- fread(PARAM$input$dataset)
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
dir.create(paste0("./exp/", PARAM$experimento, "/"), showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd(paste0("./exp/", PARAM$experimento, "/"))
# en estos archivos quedan los resultados
kbayesiana <- paste0(PARAM$experimento, ".RDATA")
klog <- paste0(PARAM$experimento, ".txt")
klog_mejor <- paste0(PARAM$experimento, "_mejor.txt")
GLOBAL_iteracion <- 0 # inicializo la variable global
GLOBAL_gananciamax <- -1 # inicializo la variable global
# si ya existe el archivo log, traigo hasta donde llegue
if (file.exists(klog)) {
tabla_log <- fread(klog)
GLOBAL_iteracion <- nrow(tabla_log)
GLOBAL_gananciamax <- tabla_log[, max(ganancia)]
}
# paso la clase a binaria que tome valores {0,1}  enteros
dataset[
foto_mes %in% PARAM$input$training,
clase01 := ifelse(clase_ternaria == "CONTINUA", 0L, 1L)
]
# los campos que se van a utilizar
campos_buenos <- setdiff(
colnames(dataset),
c("clase_ternaria", "clase01", "azar", "training")
)
# defino los datos que forma parte del training
# aqui se hace el undersampling de los CONTINUA
# notar que para esto utilizo la SEGUNDA semila
set.seed(ksemilla_azar2)
dataset[, azar := runif(nrow(dataset))]
dataset[, training := 0L]
dataset[
foto_mes %in% PARAM$input$training &
(azar <= PARAM$trainingstrategy$undersampling | clase_ternaria %in% c("BAJA+1", "BAJA+2")),
training := 1L
]
# dejo los datos en el formato que necesita LightGBM
dtrain <- lgb.Dataset(
data = data.matrix(dataset[training == 1L, campos_buenos, with = FALSE]),
label = dataset[training == 1L, clase01],
weight = dataset[training == 1L, ifelse(clase_ternaria == "BAJA+2", 1.0000002, ifelse(clase_ternaria == "BAJA+1", 1.0000001, 1.0))],
free_raw_data = FALSE
)
PARAM$hyperparametertuning$iteraciones <- 10 #120
source("C:/Labi/labo2024v1/src/lightgbm/451_lightgbm_binaria_BO_Understanding_LighGBM_parameters.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/451_lightgbm_binaria_BO.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/451_lightgbm_binaria_BO_Understanding_LighGBM_parameters.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/451_lightgbm_binaria_BO_Understanding_LighGBM_parameters.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/451_lightgbm_binaria_BO_Understanding_LighGBM_parameters.r", echo=TRUE)
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("lightgbm")
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "KA4540_ho_v2"
PARAM$input$dataset <- "./datasets/dataset_pequeno.csv"
PARAM$input$training <- c(202107) # meses donde se entrena el modelo
PARAM$input$future <- c(202109) # meses donde se aplica el modelo
PARAM$finalmodel$num_iterations <- 1491
PARAM$finalmodel$learning_rate <- 0.010013562
PARAM$finalmodel$feature_fraction <- 0.984855825584901
PARAM$finalmodel$min_data_in_leaf <- 1397
PARAM$finalmodel$num_leaves <- 3855
PARAM$finalmodel$is_unbalance <- TRUE
PARAM$finalmodel$lambda_l1 <- 0.121345305089759
PARAM$finalmodel$lambda_l2 <- 0.967864493958748
PARAM$finalmodel$max_depth <- 10
PARAM$finalmodel$max_bin <- 50
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
setwd("~/buckets/b1")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
#setwd("~/buckets/b1")
setwd("c:/labi")
# cargo MI semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
ksemilla_azar <- tabla_semillas[ 1, semilla ]  # 1 es mi primer semilla
# cargo el dataset donde voy a entrenar
dataset <- fread(PARAM$input$dataset, stringsAsFactors = TRUE)
# paso la clase a binaria que tome valores {0,1}  enteros
# set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
# esta estrategia es MUY importante
dataset[, clase01 := ifelse(clase_ternaria %in% c("BAJA+2", "BAJA+1"), 1L, 0L)]
# los campos que se van a utilizar
campos_buenos <- setdiff(colnames(dataset), c("clase_ternaria", "clase01"))
# establezco donde entreno
dataset[, train := 0L]
dataset[foto_mes %in% PARAM$input$training, train := 1L]
#--------------------------------------
# creo las carpetas donde van los resultados
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
dir.create(paste0("./exp/", PARAM$experimento, "/"), showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd(paste0("./exp/", PARAM$experimento, "/"))
# dejo los datos en el formato que necesita LightGBM
dtrain <- lgb.Dataset(
data = data.matrix(dataset[train == 1L, campos_buenos, with = FALSE]),
label = dataset[train == 1L, clase01]
)
# genero el modelo
# estos hiperparametros  salieron de una laaarga Optmizacion Bayesiana
modelo <- lgb.train(
data = dtrain,
param = list(
objective = "binary",
max_bin = PARAM$finalmodel$max_bin,
learning_rate = PARAM$finalmodel$learning_rate,
num_iterations = PARAM$finalmodel$num_iterations,
num_leaves = PARAM$finalmodel$num_leaves,
min_data_in_leaf = PARAM$finalmodel$min_data_in_leaf,
feature_fraction = PARAM$finalmodel$feature_fraction,
is_unbalance = PARAM$finalmodel$is_unbalance,
lambda_l1 = PARAM$finalmodel$lambda_l1,
lambda_l2 = PARAM$finalmodel$lambda_l2,
max_depth = PARAM$finalmodel$max_depth,
seed = ksemilla_azar
)
)
#--------------------------------------
# ahora imprimo la importancia de variables
tb_importancia <- as.data.table(lgb.importance(modelo))
archivo_importancia <- "impo.txt"
fwrite(tb_importancia,
file = archivo_importancia,
sep = "\t"
)
lgb.save(modelo, "modelo.txt" )
# aplico el modelo a los datos sin clase
dapply <- dataset[foto_mes == PARAM$input$future]
# aplico el modelo a los datos nuevos
prediccion <- predict(
modelo,
data.matrix(dapply[, campos_buenos, with = FALSE])
)
# genero la tabla de entrega
tb_entrega <- dapply[, list(numero_de_cliente, foto_mes)]
tb_entrega[, prob := prediccion]
# grabo las probabilidad del modelo
fwrite(tb_entrega,
file = "prediccion.txt",
sep = "\t"
)
# ordeno por probabilidad descendente
setorder(tb_entrega, -prob)
cortes <- seq(1000, 12000, by = 500)
for (envios in cortes) {
tb_entrega[, Predicted := 0L]
tb_entrega[1:envios, Predicted := 1L]
fwrite(tb_entrega[, list(numero_de_cliente, Predicted)],
file = paste0(PARAM$experimento, "_", envios, ".csv"),
sep = ","
)
}
cat("\n\nLa generacion de los archivos para Kaggle ha terminado\n")
source("C:/Labi/labo2024v1/src/lightgbm/454_lightgbm_final_hiper_optimos_v2.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/454_lightgbm_final_hiper_optimos_v2.r", echo=TRUE)
source("C:/Labi/labo2024v1/src/lightgbm/454_lightgbm_final_hiper_optimos_v2.r", echo=TRUE)
